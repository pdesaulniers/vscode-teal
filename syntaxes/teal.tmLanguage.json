{
	"name": "Teal",
	"scopeName": "source.teal",
	"patterns": [
		{
			"include": "#expression"
		},
		{
			"include": "#statement"
		}
	],
	"repository": {
		"base": {
			"patterns": [
				{
					"include": "#long-comment"
				},
				{
					"include": "#comment"
				},
				{
					"include": "#constant"
				},
				{
					"include": "#number"
				},
				{
					"include": "#string"
				},
				{
					"include": "#long-string"
				}
			]
		},
		"comment": {
			"patterns": [
				{
					"name": "comment.teal",
					"match": "--.*$"
				}
			]
		},
		"long-comment": {
			"patterns": [
				{
					"begin": "--\\[(=*)\\[",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment.begin.teal"
						}
					},
					"end": "\\]\\1\\]",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.comment.end.teal"
						}
					},
					"name": "comment.block.teal"
				}
			]
		},
		"constant": {
			"patterns": [
				{
					"match": "nil|true|false",
					"name": "constant.language.teal"
				}
			]
		},
		"number": {
			"patterns": [
				{
					"match": "(?<![\\w\\d.])0[xX][0-9A-Fa-f]+(?![pPeE.0-9])",
					"name": "constant.numeric.integer.hexadecimal.teal"
				},
				{
					"match": "(?<![\\w\\d.])0[xX][0-9A-Fa-f]+(\\.[0-9A-Fa-f]+)?([eE]-?\\d*)?([pP][-+]\\d+)?",
					"name": "constant.numeric.float.hexadecimal.teal"
				},
				{
					"match": "(?<![\\w\\d.])\\d+(?![pPeE.0-9])",
					"name": "constant.numeric.integer.teal"
				},
				{
					"match": "(?<![\\w\\d.])\\d+(\\.\\d+)?([eE]-?\\d*)?",
					"name": "constant.numeric.float.teal"
				}
			]
		},
		"string": {
			"patterns": [
				{
					"begin": "'",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.teal"
						}
					},
					"end": "'",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.teal"
						}
					},
					"name": "string.quoted.single.teal",
					"patterns": [
						{
							"include": "#escaped-char"
						}
					]
				},
				{
					"begin": "\"",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.teal"
						}
					},
					"end": "\"",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.teal"
						}
					},
					"name": "string.quoted.double.teal",
					"patterns": [
						{
							"include": "#escaped-char"
						}
					]
				}
			]
		},
		"long-string": {
			"begin": "\\[(=*)\\[",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.teal"
				}
			},
			"end": "\\]\\1\\]",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.teal"
				}
			},
			"name": "string.multiline.teal"
		},
		"escaped-char": {
			"patterns": [
				{
					"match": "\\\\[abfnrtvz\\\\\"'\\n]",
					"name": "constant.character.escape.teal"
				},
				{
					"match": "\\\\\\d{1,3}",
					"name": "constant.character.escape.byte.teal"
				},
				{
					"match": "\\\\x[0-9A-Fa-f][0-9A-Fa-f]",
					"name": "constant.character.escape.byte.teal"
				},
				{
					"match": "\\\\u\\{[0-9A-Fa-f]+\\}",
					"name": "constant.character.escape.unicode.teal"
				},
				{
					"match": "\\\\.",
					"name": "invalid.illegal.character.escape.teal"
				}
			]
		},
		"expression": {
			"patterns": [
				{
					"include": "#base"
				},
				{
					"include": "#parentheses"
				},
				{
					"include": "#brackets"
				},
				{
					"include": "#operator"
				},
				{
					"include": "#function-block"
				},
				{
					"include": "#function-call"
				},
				{
					"include": "#table-constructor"
				},
				{
					"include": "#record-block"
				},
				{
					"include": "#enum-block"
				},
				{
					"include": "#self"
				},
				{
					"include": "#varargs"
				}
			]
		},
		"parentheses": {
			"patterns": [
				{
					"begin": "\\(",
					"end": "\\)",
					"name": "teal.parentheses",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				}
			]
		},
		"brackets": {
			"patterns": [
				{
					"begin": "\\[",
					"end": "\\]",
					"name": "teal.brackets",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				}
			]
		},
		"operator": {
			"patterns": [
				{
					"match": "\\+|-|%|#|\\*|\\/|\\^|==?|~=|<=?|>=?|(?<!\\.)\\.{2}(?!\\.)",
					"name": "keyword.operator.teal"
				},
				{
					"match": "\\b(and|or|not)\\b",
					"name": "keyword.operator.logical.teal"
				},
				{
					"match": "\\b(as|is|in)\\b",
					"name": "keyword.other.teal"
				}
			]
		},
		"function-block": {
			"patterns": [
				{
					"begin": "function",
					"end": "end",
					"captures": {
						"0": {
							"name": "keyword.declaration.function.teal"
						}
					},
					"name": "teal.function.block",
					"patterns": [
						{
							"include": "#function-signature"
						},
						{
							"include": "#function-return-type"
						},
						{
							"include": "#statement"
						}
					]
				}
			]
		},
		"function-signature": {
			"patterns": [
				{
					"begin": "(?<=function)",
					"end": "\\)",
					"name": "function.signature.teal",
					"patterns": [
						{
							"include": "#function-name"
						},
						{
							"include": "#generics"
						},
						{
							"include": "#function-args"
						}
					]
				}
			]
		},
		"function-name": {
			"patterns": [
				{
					"match": "([a-zA-Z_][a-zA-Z0-9_]*)",
					"name": "support.function.name.teal"
				}
			]
		},
		"generics": {
			"patterns": [
				{
					"begin": "<",
					"end": ">",
					"name": "type.arguments.teal",
					"patterns": [
						{
							"include": "#type-arg"
						}
					]
				}
			]
		},
		"type-arg": {
			"patterns": [
				{
					"match": "[a-zA-Z_][a-zA-Z0-9_]*",
					"name": "support.type.teal"
				}
			]
		},
		"function-args": {
			"patterns": [
				{
					"begin": "\\(",
					"end": "(?=\\))",
					"name": "function.arguments.teal",
					"patterns": [
						{
							"include": "#function-arg-name"
						},
						{
							"include": "#function-arg-type"
						}
					]
				}
			]
		},
		"function-arg-name": {
			"patterns": [
				{
					"comment": "First argument",
					"begin": "(?<=\\()",
					"end": "(?=:|\\))",
					"name": "function.argument.teal"
				},
				{
					"comment": "Nth argument",
					"begin": ",",
					"end": "(?=:|\\))",
					"name": "function.argument.teal"
				}
			]
		},
		"function-arg-type": {
			"patterns": [
				{
					"begin": ":",
					"end": "(?=,|\\))",
					"patterns": [
						{
							"include": "#type"
						}
					]
				}
			]
		},
		"type": {
			"patterns": [
				{
					"include": "#function-type"
				},
				{
					"include": "#table-type"
				},
				{
					"include": "#type-name"
				},
				{
					"include": "#generics"
				}
			]
		},
		"function-type": {
			"patterns": [
				{
					"begin": "function",
					"end": "\\)",
					"beginCaptures": {
						"0": {
							"name": "keyword.declaration.function.teal"
						}
					},
					"patterns": [
						{
							"include": "#type"
						}
					]
				}
			]
		},
		"table-type": {
			"patterns": [
				{
					"name": "support.tabletype.teal",
					"begin": "{",
					"end": "}",
					"patterns": [
						{
							"include": "#type"
						}
					]
				}
			]
		},
		"type-name": {
			"patterns": [
				{
					"match": "[a-zA-Z_][a-zA-Z0-9_]*",
					"name": "support.type.teal"
				},
				{
					"match": "\\.",
					"name": "punctuation.accessor.teal"
				}
			]
		},
		"function-call": {
			"patterns": [
				{
					"match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b(?=\\s*(?:[({\"']|\\[\\[))",
					"name": "support.function.any-method.teal"
				}
			]
		},
		"table-constructor": {
			"begin": "{",
			"end": "}",
			"name": "teal.table-constructor",
			"patterns": [
				{
					"begin": "\\[",
					"end": "\\]",
					"name": "teal.brackets",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				},
				{
					"begin": ":",
					"end": "=",
					"patterns": [
						{
							"include": "#type"
						}
					]
				},
				{
					"include": "#expression"
				},
				{
					"match": "[a-zA-Z_][a-zA-Z0-9_]*"
				}
			]
		},
		"record-block": {
			"begin": "record",
			"end": "end",
			"captures": {
				"0": {
					"name": "keyword.declaration.record.teal"
				}
			},
			"name": "statement.record-block.teal",
			"patterns": [
				{
					"include": "#enum-block"
				},
				{
					"include": "#record-block"
				},
				{
					"include": "#new-type-declaration"
				},
				{
					"match": "^\\s*([a-zA-Z_][a-zA-Z0-9_]*)\\s*:",
					"captures": {
						"1": {
							"name": "variable.other.teal"
						}
					}
				},
				{
					"include": "#type"
				}
			]
		},
		"new-type-declaration": {
			"begin": "\\b(type)\\b",
			"end": "=",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.teal"
				}
			},
			"patterns": [
				{
					"match": "[a-zA-Z_][a-zA-Z0-9_]*",
					"name": "support.type.teal"
				}
			]
		},
		"enum-block": {
			"begin": "enum",
			"end": "end",
			"captures": {
				"0": {
					"name": "keyword.declaration.enum.teal"
				}
			},
			"patterns": [
				{
					"include": "#string"
				},
				{
					"match": "[a-zA-Z_][a-zA-Z0-9_]*",
					"name": "support.type.teal"
				}
			]
		},
		"statement": {
			"patterns": [
				{
					"include": "#expression"
				},
				{
					"include": "#if-block"
				},
				{
					"include": "#do-block"
				},
				{
					"include": "#repeat-block"
				},
				{
					"include": "#while-block"
				},
				{
					"include": "#for-block"
				}
			]
		},
		"if-block": {
			"begin": "if",
			"end": "end",
			"captures": {
				"0": {
					"name": "keyword.control.teal"
				}
			},
			"name": "statement.if-block.teal",
			"patterns": [
				{
					"begin": "(?<=if)",
					"end": "then",
					"endCaptures": {
						"0": {
							"name": "keyword.control.teal"
						}
					},
					"name": "statement.if.teal",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				},
				{
					"begin": "elseif",
					"end": "then",
					"captures": {
						"0": {
							"name": "keyword.control.teal"
						}
					},
					"name": "statement.elseif.teal",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				},
				{
					"match": "else",
					"captures": {
						"0": {
							"name": "keyword.control.teal"
						}
					},
					"name": "statement.else.teal"
				},
				{
					"include": "#statement"
				}
			]
		},
		"do-block": {
			"begin": "do",
			"end": "end",
			"captures": {
				"0": {
					"name": "keyword.control.teal"
				}
			},
			"name": "statement.do-block.teal",
			"patterns": [
				{
					"include": "#statement"
				}
			]
		},
		"repeat-block": {
			"begin": "repeat",
			"end": "until",
			"captures": {
				"0": {
					"name": "keyword.control.teal"
				}
			},
			"name": "statement.repeat-block.teal",
			"patterns": [
				{
					"include": "#statement"
				}
			]
		},
		"while-block": {
			"begin": "while",
			"end": "end",
			"captures": {
				"0": {
					"name": "keyword.control.teal"
				}
			},
			"name": "statement.while-block.teal",
			"patterns": [
				{
					"begin": "(?<=while)",
					"end": "do",
					"endCaptures": {
						"0": {
							"name": "keyword.control.teal"
						}
					}
				},
				{
					"include": "#statement"
				}
			]
		},
		"for-block": {
			"begin": "for",
			"end": "end",
			"captures": {
				"0": {
					"name": "keyword.control.teal"
				}
			},
			"name": "statement.for-block.teal",
			"patterns": [
				{
					"begin": "(?<=for)",
					"end": "do",
					"endCaptures": {
						"0": {
							"name": "keyword.control.teal"
						}
					},
					"patterns": [
						{
							"include": "#expression"
						}
					]
				},
				{
					"include": "#statement"
				}
			]
		}
	}
}
